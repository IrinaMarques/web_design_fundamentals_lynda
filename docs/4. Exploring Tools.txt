=====================
Typical workstations
=====================

Workstation Considerations
- Powerful laptop
- Max out the RAM and hard drive space
- Use the operationg system that works for you
- Use a high resolution display

Storage Considerations
- File security
- Temporary backup
- Medium to long term, more robust
- Offsite, robust, fairly inexpensive

======================
Choosing a code editor
======================

Ease of Use
Speed
Feature Sets
Features to Compare:
- Syntax highlighting
- Line numbering
- Auto complete
- Find and replace functions
- Multilingual support
- Syntax error highlighting
- Code snippets for common code

==========================
Choosing a graphics editor
==========================

Web Graphics Requirements:
- You'll need to work with both vector and raster graphics
- Using an editor that can handle both is ideal, but it's not uncommon to use a separate editor for raster and vector
- Your editor should have powerful optimization tools that allow it to export images into the desired formats
-- Having an editor that can represent the states or changes to elements based on user interactivity is extremely helpful

- Photoshop
- Illustrator
- Fireworks
- CorelDRAW

Alternate Tools
http://inkscape.org/en
http://www.gimp.org
http://bohemiancoding.com/sketch - only for Mac

==============
Testing tools
==============

Browsers:
- Chrome
- Firefox
- Opera
- Safari 
- Internet Explorer

http://modern.ie

Testing on mobile devices:
- IOS device
- Android device

Test in multiple devices
http://creative.adobe.com/products/inspect
http://vanamco.com/ghostlab

==================
Prototyping tools
==================

http://goo.gl/Sy9XQt
http://www.adobe.com/products/acrobat
http://office.microsoft.com/en-us/visio (only for windows)
http://www.omnigroup.com/omnigraffle (only for mac)
http://www.axure.com
http://www.balsamiq.com
http://www.justinmind.com
http://www.antetype.com

http://www.getbootstrap.com
http://foundation.zurb.com

===========
Frameworks
===========

Collection of HTML, CSS, and JavaScript files that speed up site development by providing a foundation for structure, styling, layout, and funtionality. Frameworks vary wildly in their size, focus, and abilities. 

Some frameworks are very focused and lightweight, while others offer a comprehensive set of UI styling, features and functionality to choose from.

Frameworks come with:
grids.css 
- layouts.css
- typography.css
- UI-elements.css
- normalize.css
demo.html
behavior scripts 
UI elements scripts
icons
UI-elements sprites
web fonts. 

Benefits:
- Speed up development time
- Cross-browser compatibility is often built-in
- Prototypes, or entire sites, can be constructed with minimal styling required by the author
- Great fot learning about overall site building, or specific

Downsides:
- You'll usually use only a fraction of what most frameworks offer.
- You're restricted by someone else's coding standards
- Modifying the framework to fit your workflow can be time-consuming techniques

=====================
Javascript libraries
=====================

Pre-written libraries of JavaScript that provide methods for handling complex tasks. Most are focused on specific tasks like animation, UI, interaction, page assembly, or application logic. 

Benefits:
- Much faster than scripting from scratch
- Provides functionaity that might be beyond current skill levels
- Utilizing a stable, tested code base. 

Downsides:
- Designers often become reliant on them to a function
- This can lead to bloat, as libraries are often used when they are not needed
- Using libraries adds dependencies to your projects
- You become tied to the libraries coding standards

Almost all web designera use JavaScript libraries to some degree. As a designer, it's your job to know when they're appropriate. Experiment with using them as experience is the only sure way to know when a library is the best solution. 